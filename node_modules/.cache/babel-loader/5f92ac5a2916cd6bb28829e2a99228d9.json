{"ast":null,"code":"export const initialState = {\n  basket: [],\n  user: null\n}; // Selector\n\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case \"REMOVE_FROM_BASKET\":\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {} else {\n        console.warn(`Cant remove product (id: ${action.id}) as its not in basket`);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/js_projekty/amazon-copy/src/reducer.js"],"names":["initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","type","index","findIndex","basketItem","id","newBasket","console","warn"],"mappings":"AACA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE,EADgB;AAExBC,EAAAA,IAAI,EAAE;AAFkB,CAArB,C,CAKL;;AACA,OAAO,MAAMC,cAAc,GAAIF,MAAD,IAC5BA,MAD4B,aAC5BA,MAD4B,uBAC5BA,MAAM,CAAEG,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADK;;AAGP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAM,EACJ,GAAGF,KADC;AAEJR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACJ,IAAzB;AAFJ,OAAN;;AAIA,SAAK,oBAAL;AACE,YAAMM,KAAK,GAAGH,KAAK,CAACR,MAAN,CAAaY,SAAb,CAAwBC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBL,MAAM,CAACK,EAAhE,CAAd;AACA,UAAIC,SAAS,GAAG,CAAC,GAAGP,KAAK,CAACR,MAAV,CAAhB;;AACA,UAAGW,KAAK,IAAE,CAAV,EAAY,CAEX,CAFD,MAEK;AACHK,QAAAA,OAAO,CAACC,IAAR,CAAc,4BAA2BR,MAAM,CAACK,EAAG,wBAAnD;AACD;;AACL;AACE,aAAON,KAAP;AAfJ;AAiBD,CAlBD;;AAoBA,eAAeD,OAAf","sourcesContent":["\r\nexport const initialState = {\r\n    basket: [],\r\n    user: null\r\n  };\r\n  \r\n  // Selector\r\n  export const getBasketTotal = (basket) => \r\n    basket?.reduce((amount, item) => item.price + amount, 0);\r\n  \r\n  const reducer = (state, action) => {\r\n    switch (action.type) {\r\n      case \"ADD_TO_BASKET\":\r\n        return{\r\n          ...state,\r\n          basket: [...state.basket, action.item],\r\n        };\r\n        case \"REMOVE_FROM_BASKET\":\r\n          const index = state.basket.findIndex((basketItem) => basketItem.id === action.id);\r\n          let newBasket = [...state.basket];\r\n          if(index>=0){\r\n\r\n          }else{\r\n            console.warn(`Cant remove product (id: ${action.id}) as its not in basket`);\r\n          }\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default reducer;"]},"metadata":{},"sourceType":"module"}